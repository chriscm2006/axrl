{"version":3,"sources":["webpack:///./src/components/ClassHierarchy.js","webpack:///./src/pages/docs/schema.js","webpack:///./src/schema.js","webpack:///./src/components/TypeLink.js"],"names":["classStructure","classDefinition","key","subClasses","subclasses","length","react_default","a","createElement","map","TypeLink","to","id","comment","ClassHierarchy","render","Fragment","getClassHierarchy","React","Component","SchemaPage","layout","title","Prism","code","simpleExample","href","components_ClassHierarchy","classes","require","properties","findClassData","find","classData","getClassDescriptions","module","exports","findPropertyData","propertyData","getClassInheritance","subClassOf","concat","getSuperClasses","type","filter","_ref","parentClass","_ref2","Object","assign","this","props","url","linkText","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"kLAIA,SAASA,EAAeC,EAAiBC,GACvC,IAAIC,EAAa,KASjB,OARIF,EAAgBG,WAAWC,OAAS,IACtCF,EACEG,EAAAC,EAAAC,cAAA,UACGP,EAAgBG,WAAWK,IAAIT,KAMpCM,EAAAC,EAAAC,cAAA,MAAIN,IAAKA,GACPI,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAUC,GAAIV,EAAgBW,KADhC,KAEU,IACTX,EAAgBY,QAJnB,IAI4BP,EAAAC,EAAAC,cAAA,WACzBL,OAgBQW,4FAVbC,OAAA,WACE,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,KACEV,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAKS,8BAAoBR,IAAIT,SALRkB,IAAMC,WCnB7BC,4FACJL,OAAA,WACE,OACET,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,MAAM,UACZhB,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sWAWAF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,wJAKAF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWC,KAAMC,IAEjBnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBADF,aAGAF,EAAAC,EAAAC,cAAA,8MAOAF,EAAAC,EAAAC,cAAA,qDAEAF,EAAAC,EAAAC,cAAA,gGAEoC,IAClCF,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,4CAAR,oBAEK,IALP,qCASApB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBADF,aAGAF,EAAAC,EAAAC,cAAA,wBACcF,EAAAC,EAAAC,cAAA,qBADd,sRAO2BF,EAAAC,EAAAC,cAAA,2BAP3B,OAQMF,EAAAC,EAAAC,cAAA,+BARN,8BAUEF,EAAAC,EAAAC,cAAA,iCAVF,oFAeAF,EAAAC,EAAAC,cAAA,gCAEAF,EAAAC,EAAAC,cAACmB,EAAD,WAjEiBT,IAAMC,WAuEhBC,6CC5Ef,IAAMQ,EAAUC,EAAQ,KAClBC,EAAaD,EAAQ,KAE3B,SAASE,EAAcnB,GACrB,OAAOgB,EAAQ,UAAUI,KACvB,SAAAC,GAAS,OAAIA,EAAUrB,KAAOA,IA0BlC,SAASsB,IACP,OAAON,EAAQ,UAgBjBO,EAAOC,QAAU,CACfL,gBACAM,iBAzCF,SAA0BzB,GACxB,OAAOkB,EAAW,UAAUE,KAC1B,SAAAM,GAAY,OAAIA,EAAa1B,KAAOA,KAwCtC2B,oBApCF,SAASA,EAAoB3B,GAC3B,IAAMqB,EAAYF,EAAcnB,GAChC,OAAKqB,EAGEM,EAAoBN,EAAUO,YAAYC,OAC/CR,GAHO,IAkCTS,gBA3BF,SAAyBC,GACvB,OAAOf,EAAQ,UAAUgB,OACvB,SAAAC,GAAA,OAAAA,EAAGL,aAAgCG,KA0BrCT,uBACAjB,kBAnBF,SAASA,EAAkB6B,GAKzB,OAJmBZ,IAAuBU,OACxC,SAAAG,GAAA,OAAAA,EAAGP,aAAgCM,IAGnBrC,IAAI,SAAAR,GACpB,OAAA+C,OAAAC,OAAA,CACE7C,WAAYa,EAAkBhB,EAAgBW,KAC3CX,0xHCzCHS,4FACJK,OAAA,WAAS,IACCJ,EAAOuC,KAAKC,MAAZxC,GACFyC,EAAM,IAAMzC,EACZ0C,EAAW1C,EACjB,OAAO2C,EAAA/C,EAAAC,cAAC+C,EAAA,KAAD,CAAM5C,GAAIyC,GAAMC,OALJnC,IAAMC,WASdT","file":"component---src-pages-docs-schema-js-50bb3fc025f5f2c0d5c9.js","sourcesContent":["import React from 'react'\nimport { getClassHierarchy } from '../schema'\nimport TypeLink from './TypeLink'\n\nfunction classStructure(classDefinition, key) {\n  let subClasses = null\n  if (classDefinition.subclasses.length > 0) {\n    subClasses = (\n      <ul>\n        {classDefinition.subclasses.map(classStructure)}\n      </ul>\n    )\n  }\n\n  return (\n    <li key={key}>\n      <strong>\n        <TypeLink to={classDefinition.id} />:\n      </strong>{' '}\n      {classDefinition.comment} <br />\n      {subClasses}\n    </li>\n  )\n}\n\nclass ClassHierarchy extends React.Component {\n  render() {\n    return (\n      <>\n        <h2>Type Structure</h2>\n        <ul>{getClassHierarchy().map(classStructure)}</ul>\n      </>\n    )\n  }\n}\n\nexport default ClassHierarchy\n","import React from 'react'\nimport { PrismJSON } from '../../components/Prism'\nimport simpleExample from '../../examples/simple.json'\nimport Layout from '../../components/layout'\nimport ClassHierarchy from '../../components/ClassHierarchy'\n\nclass SchemaPage extends React.Component {\n  render() {\n    return (\n      <Layout title=\"Schema\">\n        <h2>Introduction</h2>\n        <p>\n          Accessibility Reporting Language (AXRL) is a data\n          format designed to describe accessibility tests\n          for Web pages, Native apps and other software.\n          AXRL is designed to be a flexible and extendable\n          data format. AXRL is designed as a JSON format,\n          although because it is based on semantic web\n          technologies, it could also be expressed in other\n          formats.\n        </p>\n\n        <h3>Example: A basic web page test</h3>\n        <p>\n          This example shows the test for example.com, where\n          the test produced 2 results. One of the results is\n          \"failed\", and the second is \"passed\".\n        </p>\n        <PrismJSON code={simpleExample} />\n\n        <h2>\n          <code>@context</code> property\n        </h2>\n        <p>\n          Context is a required property that lives at the\n          root object. The context provides a definition for\n          all of the terms used in the data format. There\n          are a number of contexts predefined for AXRL:\n        </p>\n\n        <p>TODO: Define / describe default contexts</p>\n\n        <p>\n          If the default contexts are insufficient, a custom\n          context can also be provided. The{' '}\n          <a href=\"https://json-ld.org/spec/latest/json-ld/\">\n            JSON-LD standard\n          </a>{' '}\n          defines how these can be created.\n        </p>\n\n        <h2>\n          <code>@type</code> property\n        </h2>\n        <p>\n          An object's <code>@type</code>property defines\n          what that object is. By adding a type to all\n          objects, that object is explicitly defined,\n          instead of having to infer the type from its\n          properties, or from the property it is on. Types\n          can easilly be extended to add properties as they\n          are needed. For example, <code>WebPageTest</code>\n          and <code>AndroidViewTest</code> are both\n          extensions on the\n          <code>UserInterfaceTest</code> type. This gives\n          them a number of shared properties, as some unique\n          properties.\n        </p>\n\n        <p>TODO: Add a graphic</p>\n\n        <ClassHierarchy />\n      </Layout>\n    )\n  }\n}\n\nexport default SchemaPage\n","/* IMPORTANT: This file is used in NodeJS, so can't use ES6 modules */\nconst classes = require('./schema/classes.json')\nconst properties = require('./schema/properties.json')\n\nfunction findClassData(id) {\n  return classes['@graph'].find(\n    classData => classData.id === id\n  )\n}\n\nfunction findPropertyData(id) {\n  return properties['@graph'].find(\n    propertyData => propertyData.id === id\n  )\n}\n\nfunction getClassInheritance(id) {\n  const classData = findClassData(id)\n  if (!classData) {\n    return []\n  }\n  return getClassInheritance(classData.subClassOf).concat(\n    classData\n  )\n}\n\nfunction getSuperClasses(type) {\n  return classes['@graph'].filter(\n    ({ subClassOf }) => subClassOf === type\n  )\n}\n\nfunction getClassDescriptions() {\n  return classes['@graph']\n}\n\nfunction getClassHierarchy(parentClass) {\n  const subclasses = getClassDescriptions().filter(\n    ({ subClassOf }) => subClassOf === parentClass\n  )\n\n  return subclasses.map(classDefinition => {\n    return {\n      subclasses: getClassHierarchy(classDefinition.id),\n      ...classDefinition\n    }\n  })\n}\n\nmodule.exports = {\n  findClassData,\n  findPropertyData,\n  getClassInheritance,\n  getSuperClasses,\n  getClassDescriptions,\n  getClassHierarchy\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nclass TypeLink extends React.Component {\n  render() {\n    const { to } = this.props\n    const url = '/' + to\n    const linkText = to\n    return <Link to={url}>{linkText}</Link>\n  }\n}\n\nexport default TypeLink\n"],"sourceRoot":""}