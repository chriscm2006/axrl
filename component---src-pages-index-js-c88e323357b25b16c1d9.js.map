{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","a","createElement","title","keywords","style","maxWidth","marginBottom","to","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Header","_ref","siteTitle","react_default","background","className","padding","gatsby_browser_entry","color","fontSize","textDecoration","defaultProps","Layout","Fragment","header","site","siteMetadata","margin","paddingTop","_755544856","node","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","array","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-c88e323357b25b16c1d9.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO\n      title=\"Home\"\n      keywords={[`gatsby`, `application`, `react`]}\n    />\n    <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <div\n      style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}\n    />\n    <Link to=\"/page-2/\">Go to page 2</Link>\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: `#003349`,\n      marginBottom: `1.45rem`\n    }}\n  >\n    <div\n      className=\"layoutSize\"\n      style={{ padding: `1.45rem 1.0875rem` }}\n    >\n      <Link\n        to=\"/\"\n        style={{\n          color: `white`,\n          fontSize: '1.3em',\n          textDecoration: `none`\n        }}\n      >\n        {siteTitle}\n      </Link>\n    </div>\n    <nav\n      className=\"mainNav\"\n      style={{\n        background: '#0077c8'\n      }}\n    >\n      <ul className=\"layoutSize\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/docs/audit\">Using AXRL</Link>\n        </li>\n        <li>\n          <Link to=\"/docs/base\">Specification</Link>\n        </li>\n      </ul>\n    </nav>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\nimport './prism-a11y.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <main\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0\n          }}\n        >\n          {children}\n        </main>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang\n            }}\n            title={title}\n            titleTemplate={`%s | ${\n              data.site.siteMetadata.title\n            }`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription\n              },\n              {\n                property: `og:title`,\n                content: title\n              },\n              {\n                property: `og:description`,\n                content: metaDescription\n              },\n              {\n                property: `og:type`,\n                content: `website`\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author\n              },\n              {\n                name: `twitter:title`,\n                content: title\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription\n              }\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `)\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: []\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}