{"data":{"markdownRemark":{"html":"<h2>Single run example</h2>\n<p>The following is an example of a test for a single page, such as that produced by axe-core. Most things have not been changed, although there are a few notable differences:</p>\n<ul>\n<li>Types have been added to all objects. This is in line with a best practice for linked data</li>\n<li>\"groupings\" based on data have been merged. Any / all / none are no longer separate properties but are in an array, with its the type of remediation being listed as a key. Similarly for violations, passes, etc.</li>\n<li>Rule information has been put in its own object, rather than mix that data with the test results. This separation lets us express multiple results for the same rule.</li>\n</ul>\n<pre><code class=\"language-json\">{\n  // Information about the page\n  \"@type\": \"WebPageDescription\",\n  \"name\": \"Deque Homepage\",\n  \"url\": \"http://deque.com\",\n\n  // TODO: Environment variables... should I include audit info here?\n  \"testedWith\": {\n    \"@type\": \"Software\",\n    \"name\": \"axe-core\",\n    \"version\": \"3.1.2\"\n  },\n\n  \"testResults\": [\n    {\n      // TODO: Should this be a reverse relationship?\n      \"@type\": \"UITestResult\",\n      \"outcome\": \"failed\",\n      \"impact\": \"minor\",\n\n      // Put \"static\" info about the rule in its own object\n      \"testDescription\": {\n        \"@type\": \"TestDescription\",\n        \"@id\": \"axe-core:duplicate-id\",\n        \"help\": \"id attribute value must be unique\", // Maps to dct:title\n        \"description\": \"Ensures every id attribute value is unique\",\n        \"requirementOf\": [\n          \"wcag20:parsing\",\n          \"wcag20:level_a\"\n        ],\n        \"helpUrl\": \"https://dequeuniversity.com/rules/axe/3.1/duplicate-id\",\n        \"tags\": [\"cat:color\", \"wcag2a\", \"wcag411\"]\n      },\n\n      \"nodeResults\": [\n        {\n          // First node\n          \"@type\": \"ApplicableNodeResult\",\n          \"impact\": \"minor\",\n          \"meetsRequirement\": false, // This node failed\n          // Put node properties into its own object\n          \"targetNode\": {\n            \"@type\": \"DOMNodeDescription\",\n            \"html\": \"&#x3C;div>...&#x3C;/div>\",\n            \"selector\": [\"div\"]\n          },\n          \"relatedNodes\": [\n            {\n              \"@type\": \"DOMNodeDescription\",\n              \"html\": \"&#x3C;div>...&#x3C;/div>\",\n              \"selector\": [\"div\"]\n            }\n          ],\n          \"remediation\": [\n            {\n              \"@type\": \"Remediation\",\n              \"category\": \"all\",\n              \"message\": \"fix the following\",\n              \"remediation\": [\n                \"Document has multiple static elements with the same id attribute\"\n              ]\n            }\n          ]\n        },\n        {\n          // Second node\n          \"@type\": \"ApplicableNodeResult\",\n          \"meetsRequirement\": true, // This node passed\n          \"impact\": null,\n          \"node\": {\n            \"html\": \"&#x3C;div>...&#x3C;/div>\",\n            \"selector\": [\"div\"]\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<h2>Goals</h2>\n<p>Support accessibility results for:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Multiple platforms, including, web, iOS, Android and Windows.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Make it easy to generate from existing products, particularly axe-core</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Support result aggregation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Can function as a test case language</li>\n<li>\n<p>Can easilly be filtered for:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Number of issues</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Level of impact</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Can be used to express Passed, Failed, Inapplicable, and Unknown</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Include remediation information</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Can be used to generate bug tickets and user stories</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Have it extend established semantic web concepts where they make sense</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Multiple modalities, including fully automated, tool assisted and manual testing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Allows for localisation of results</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Can be used to express a confidence level</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Can store environmental information for reproducing results</li>\n</ul>\n<h2>Object Types</h2>\n<h3>TestDescription</h3>\n<p>A TestDescription defines a test, such as a rule in axe-core or a checkpoint in the Deque Way. Accessibility testing is often broken down into different layers. For example, WCAG 2.1 Level A has 30 Success Criteria. Each success criteria is again broken down by different tools into different rules or checkpoints. This relationship can be expressed through the <code>requirementOf</code> property. When the outcome of a test is <code>failed</code>, all tests listed in <code>requirementOf</code> are also automatically <code>failed</code>.</p>\n<h4>TestDescription Example</h4>\n<pre><code class=\"language-json\">{\n  \"@type\": \"TestDescription\",\n  \"@id\": \"axe-core:duplicate-id\",\n  \"help\": \"id attribute value must be unique\", // Maps to dct:title\n  \"description\": \"Ensures every id attribute value is unique\",\n  \"requirementOf\": [\"wcag20:parsing\", \"wcag20:level_a\"],\n  \"helpUrl\": \"https://dequeuniversity.com/rules/axe/3.1/duplicate-id?application=AxeChrome\",\n  \"tags\": [\"cat:color\", \"wcag2a\", \"wcag411\"]\n}\n</code></pre>\n<h4>TestDescription Schema</h4>\n<pre><code class=\"language-json\">{\n  \"@id\": \"TestDescription\",\n  \"@type\": \"Class\",\n  \"comment\": \"A description of an accessibility test\",\n  \"properties\": [{\n    \"@id\": \"name\",\n    \"@type\": \"Property\",\n    \"alternateName\": \"help\",\n    \"rangeIncludes\": \"Text\",\n    \"comment\": \"Short text describing the topic or purpose of the test\",\n  }, {\n    \"@id\": \"URL\",\n    \"@type\": \"Property\",\n    \"alternateName\": \"helpUrl\",\n    \"rangeIncludes\": \"Text\",\n    \"comment\": \"URL that provides more information about the specifics of accessibility test.\",\n  }, {\n    \"@id\": \"description\",\n    \"@type\": \"Property\",\n    \"rangeIncludes\": \"Text\",\n    \"comment\": \"Full plain language description of the test.\",\n  }, {\n    \"@id\": \"requirementOf\",\n    \"@type\": \"Property\",\n    \"rangeIncludes\": \"TestDescription\",\n    \"comment\": \"A list of tests that fail when the result of the TestDescription fails. For example,\n    if an axe-core rule for WCAG 2.1 SC 1.1.1 fails, than that SC also fails.\",\n  }, {\n    \"@id\": \"tags\",\n    \"@type\": \"Property\",\n    \"rangeIncludes\": \"Text\",\n    \"comment\": \"A list of strings used to give free-form taxonomy and categorisation to an test.\",\n  }]\n}\n</code></pre>\n<h3>UIDescription</h3>\n<p>A UIDescription is a description of the state of the user interface at the time that a test was performed. The goal is to capture enough information about the user interface the moment it was tested, to enable someone familiar with the product to either reproduce issues or varify that they have been resolved. An app, be it a web app or a native app, can often exist in a variety of states. Changes in state of the user interface should result in a different UIDescription.</p>\n<p>There is no universal way of capturing the state of an application. At best, an approximation of the state can be made. Each platform should have its own extension of UIDescription, such as WebPageDescription, or AndroidAppDescription. These platform specific types can be used to capture actions that put the app in the tested state.</p>\n<h4>UIDescription Example</h4>\n<pre><code class=\"language-json\">{\n  \"@type\": \"WebPageDescription\",\n  \"name\": \"Deque Homepage\",\n  \"url\": \"http://deque.com\",\n  \"resources\": [\n    {\n      \"url\": \"http://deque.com\",\n      \"mimetype\": \"text/html\",\n      \"sri\": \"sha256-10kIurI2DW5bjegHOgc/MMSHiiXK2CAVWCQfoN6h0fs=\",\n      \"triggeredEvents\": [\n        {\n          \"type\": \"mouseover\",\n          \"...\": \"...\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>\n<h4>UIDescription Schema</h4>\n<pre><code class=\"language-json\">\"TODO\"\n</code></pre>\n<h3>UITestResult</h3>\n<p>The UITestResult object describes the result of a test applied to a user interface in a particular state. The description of the test is recorded in <code>testDescription</code> and the description of the user interface in <code>interface</code>. Information about which node passed or failed is expressed in the <code>nodeResults</code> property.</p>\n<p>The <code>outcome</code> can be either <code>passed</code>, <code>failed</code>, <code>inapplicable</code>, or <code>incomplete</code>. The <code>impact</code> can be <code>minor</code>, <code>moderate</code>, <code>serious</code>, or <code>critical</code> when the outcome is <code>failed</code>. For all other outcomes the <code>impact</code> must be <code>null</code>.</p>\n<h4>UITestResult Example</h4>\n<pre><code class=\"language-json\">{\n  \"@type\": \"UITestResult\",\n  \"outcome\": \"failed\",\n  \"impact\": \"minor\",\n  // Note: `test_description` and `interface` can be expressed through through an\n  //  internal ID, an object literal, or the @reverse relationship.\n  \"testDescription\": \"_:rule123\",\n  \"interface\": \"_:hoempage\",\n  \"nodeResults\": [\n    {\n      \"@type\": \"ApplicableNodeResult\",\n      \"...\": \"...\"\n    },\n    {\n      \"@type\": \"ApplicableNodeResult\",\n      \"...\": \"...\"\n    }\n  ]\n}\n</code></pre>\n<h4>UITestResult Schema</h4>\n<pre><code class=\"language-json\">{\n  \"@id\": \"UITestResult\",\n  \"@type\": \"Class\",\n  \"comment\": \"The result of testing a user interface.\",\n  \"properties\": [\n    {\n      \"@id\": \"outcome\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"earl:OutcomeValue\",\n      \"comment\": \"The value returned after performing a test.\"\n    },\n    {\n      \"@id\": \"impact\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"ImpactValue\",\n      \"comment\": \"The severity on users of getting a failed outcome\"\n    },\n    {\n      \"@id\": \"testDescription\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"TestDescription\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"interface\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"UIDescription\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"nodeResults\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"ApplicableNodeResult\",\n      \"comment\": \"\"\n    }\n  ]\n}\n</code></pre>\n<h3>ApplicableNodeResult</h3>\n<p>A NodeTestResult describes if a node that is applicable in an accessibility test meets that test's expectation(s). For example, a rule that checks if all <code>img</code> elements have an accessible name, there would be one NodeTestResult for each <code>img</code> element. The <code>meetsExpecations</code> property is <code>true</code> when the <code>node</code> has an accessible name, and <code>false</code> when it doesn't.</p>\n<p><strong>Important:</strong> Unlike axe-core's current format, relatedNodes are not attached to a specific\n\"check\" (expressed in \"remediation\").</p>\n<p><strong>TODO:</strong> How should we ensure there is always a relationship to a UITestResult? Or should this have a relationship to the test instead?</p>\n<h4>ApplicableNodeResult Example</h4>\n<pre><code class=\"language-json\">{\n  \"@type\": \"ApplicableNodeResult\",\n  \"meetsExpecations\": false,\n  \"impact\": \"minor\",\n  \"targetNode\": {\n    \"@type\": \"DOMNodeDescription\",\n    \"...\": \"...\"\n  },\n  \"remediation\": [\n    {\n      \"@type\": \"Remediaton\",\n      \"...\": \"...\"\n    }\n  ],\n  \"relatedNodes\": [\n    {\n      \"@type\": \"DOMNodeDescription\",\n      \"...\": \"...\"\n    },\n    {\n      \"@type\": \"DOMNodeDescription\",\n      \"...\": \"...\"\n    }\n  ]\n}\n</code></pre>\n<h4>ApplicableNodeResult Schema</h4>\n<pre><code class=\"language-json\">{\n  \"@id\": \"ApplicableNodeResult\",\n  \"@type\": \"Class\",\n  \"comment\": \"\",\n  \"properties\": [\n    {\n      \"@id\": \"meetsExpectation\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"Boolean\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"impact\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"ImpactValue\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"targetNode\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"NodeDescription\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"relatedNodes\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"NodeDescription\",\n      \"comment\": \"\"\n    },\n    {\n      \"@id\": \"remediation\",\n      \"@type\": \"Property\",\n      \"rangeIncludes\": \"Remediation\",\n      \"comment\": \"\"\n    }\n  ]\n}\n</code></pre>\n<h3>Remediation</h3>\n<h3>NodeDescription</h3>\n<p>NodeDescription is used to describe identifying characteristics of a node in a user interface. Which characteristics are needed depends on what platform. NodeDescription is an abstract type from which platform specific types can be extended. See <a href=\"#platform-specific-types\">Platform Specific Types</a> for details about different platforms.</p>\n<h3>ImpactValue</h3>\n<dl>\n  <dt id=\"minor\">minor</dt>\n  <dd></dd>\n  <dt id=\"moderate\">moderate</dt>\n  <dd></dd>\n  <dt id=\"serious\">serious</dt>\n  <dd></dd>\n  <dt id=\"critical\">critical</dt>\n  <dd></dd>\n</dl>\n<h2>Platform Specific Types</h2>\n<p>Abstract types in the base AXRL spec have been extended for different platforms, including web, Android, iOS and Windows.</p>\n<h3>Web Types</h3>\n<p>For details see <a href=\"web.md\">AXRL for web</a>.</p>\n<table>\n<thead>\n<tr>\n<th>Abstract type</th>\n<th>Web type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SoftwareDescription</td>\n<td><a href=\"web.md#WebSiteDescription\">WebSiteDescription</a></td>\n</tr>\n<tr>\n<td>UIDescription</td>\n<td><a href=\"web.md#WebPageDescription\">WebPageDescription</a></td>\n</tr>\n<tr>\n<td>NodeDescription</td>\n<td><a href=\"web.md#DOMNodeDescription\">DOMNodeDescription</a></td>\n</tr>\n</tbody>\n</table>\n<h2>Test Descriptions</h2>\n<pre><code class=\"language-ts\">interface TestDescription {\n  type: 'TestDescription'\n  id: string\n  description?: string\n  help?: string\n  helpUrl?: string\n  tags?: TagValue[]\n  aggregates?: TestDescription[] // Things that fail when this rule fails, e.g. WCAG success criteria / conformance level(s)\n  testResults?: TestResult[]\n}\n</code></pre>\n<h2>Test Results</h2>\n<pre><code class=\"language-ts\">interface UITestResult {\n  type: 'UITestResult'\n  test: TestDescription\n  user_interface: UserInterface\n  outcome: Outcome\n  nodeResults: ApplicableNodeResult[]\n}\n\ninterface ApplicableNodeResult {\n  type: 'ApplicableNodeResult'\n  target_node: NodeDescription\n  meets_rquirement: Boolean | 'unknown'\n  impact: Impact | Null\n  related_nodes?: NodeDescription[]\n  remediation?: Remediation | Remediation[],\n}\n\nenum Outcome {\n  Passed = 'earl:passed',\n  Failed = 'earl:failed',\n  Inapplicable = 'earl:inapplicable',\n  Incomplete = 'earl:incomplete'\n}\n\nenum Impact = {\n  Minor = 'minor',\n  Moderate = 'moderate',\n  Serious = 'serious',\n  Critical = 'critical'\n}\n\ninterface Remediation {\n  type: 'Remediation'\n  category: 'any' | 'all'\n  description: string // Example: Solve all of the following\n  messages: string[]\n  data: Object\n}\n</code></pre>\n<h2>Audits</h2>\n<pre><code class=\"language-ts\">// Software extends SoftwareProject\n// Website extends SoftwareProject\n\ninterface AuditResult {\n  type: 'AuditResult'\n  startDate: DateTime\n  endDate: DateTime\n  // TODO, Section 508, Air Carrier Access Act (ACAA), WCAG 2.0 Smoke Test, etc.\n  // testStandard: AccessibilityStandard\n  // The lead auditor, the person or tool responsible for the correctness of the results\n  auditor: Auditor\n  // Secondary auditors, if some of the test results were produced by other tools / individuals\n  co_auditors?: Auditor[]\n\n  configuration: Unknown // from Comply, scan configuration and scripts\n\n  tests: TestDefinition[]\n  sample: UserInterface[]\n  test_results: TestResult[]\n\n  // environment? // What is this?\n  // release? // What is this?\n  // platform? // What is this?\n  // assistive_technology? // What is this?\n}\n\n// TODO: Should issues stay grouped by rule?\ninterface Scope {}\ninterface URI {}\ninterface DateTime {}\ninterface Auditor {}\ninterface Environment {}\ninterface TestTarget {\n  html: String // outerHTML code\n  target: String[] | String[][] // css selector\n}\n\ninterface AccessibilityStandard {}\n</code></pre>\n<h2>SoftwareProjects, User Interfaces and Nodes</h2>\n<pre><code class=\"language-ts\">interface InterfaceDescription {\n  uri: URI\n  testResults: TestResult[]\n}\n\ninterface NodeDescription {}\n\ninterface SoftwareProject {\n  name: String\n  description?: String\n  uri?: String\n  owner?: any // TODO\n  scope?: any // TODO\n  subcomponents?: SoftwareProject[]\n  // The result of one or more audits\n  auditData?: AuditResult | AuditResult[]\n  testConfigurations?: unknown\n}\n</code></pre>\n<h3>Web interfaces and DOM nodes</h3>\n<pre><code class=\"language-ts\">interface DOMNodeDescription extends NodeDescription {\n  id: string\n  selector: string\n  source: string\n  accessibleName?: string\n  // ancestory? // It's position from the root\n}\n\ninterface WebPageDescription extends InterfaceDescription {\n  url: URI\n  crawlerData?: CrawlerData // TODO: Define this\n  grouping?: PageCollection[] // TODO: define this\n  source?: string\n  assets?: string[]\n}\n</code></pre>\n<h3>Windows interfaces and ??? nodes</h3>\n<p>TODO</p>\n<h3>Android interfaces and ??? nodes</h3>\n<p>TODO</p>\n<h3>iOS interfaces and ??? nodes</h3>\n<p>TODO</p>\n<h2>Transforming axe-core format</h2>\n<pre><code class=\"language-ts\">interface AxeResults {\n  url: string\n  timestamp: string\n  passes: Result[]\n  violations: Result[]\n  incomplete: Result[]\n  inapplicable: Result[]\n}\n\ninterface Result {\n  description: string\n  help: string\n  helpUrl: string\n  id: string\n  impact: ImpactValue\n  tags: TagValue[]\n  nodes: NodeResult[]\n}\n\ninterface NodeResult {\n  html: string\n  impact: ImpactValue\n  target: string[]\n  any: CheckResult[]\n  all: CheckResult[]\n  none: CheckResult[]\n  failureSummary?: string\n}\n\ninterface CheckResult {\n  id: string\n  impact: string\n  message: string\n  data: any\n  relatedNodes?: RelatedNode[]\n}\n\ninterface RelatedNode {\n  target: string[]\n  html: string\n}\n</code></pre>\n<p>TODO:</p>\n<p>From Comply:</p>\n<ul>\n<li>\n<p>Accessibility “issue” information</p>\n<ul>\n<li>axe result data</li>\n<li>application mapped severity</li>\n<li>user-supplied comments</li>\n<li>user-supplied remediation suggestions</li>\n<li>user-supplied assignee</li>\n<li>user-supplied labels</li>\n</ul>\n</li>\n<li>Organizations</li>\n<li>Projects</li>\n<li>Scan configuration</li>\n<li>Recorded scripts</li>\n</ul>","frontmatter":{"date":"November 07, 2017","path":"/docs/spec","title":"Accessibility Reporting Language (AXRL)"}}},"pageContext":{}}