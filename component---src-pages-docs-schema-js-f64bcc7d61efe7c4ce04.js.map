{"version":3,"sources":["webpack:///./src/components/ClassHierarchy.js","webpack:///./src/pages/docs/schema.js","webpack:///./src/schema.js","webpack:///./src/components/TypeLink.js"],"names":["classStructure","classDefinition","key","subClasses","subclasses","length","react_default","a","createElement","map","TypeLink","to","id","comment","ClassHierarchy","render","Fragment","getClassHierarchy","React","Component","SchemaPage","layout","title","Prism","code","simpleWebExample","href","components_ClassHierarchy","classes","require","properties","context","findClassData","find","classData","findPropertyData","propertyData","getPropertyDescriptions","concat","getClassDescriptions","getContext","Object","assign","module","exports","findTypeData","type","getClassInheritance","subClassOf","getSuperClasses","filter","_ref","getTypeDescriptions","parentClass","_ref2","getUrl","_to$split","split","namespace","baseURL","Error","this","props","typeData","react__WEBPACK_IMPORTED_MODULE_1___default","url","linkText","label","substr","target","gatsby__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"component---src-pages-docs-schema-js-f64bcc7d61efe7c4ce04.js","sourcesContent":["import React from 'react'\nimport { getClassHierarchy } from '../schema'\nimport TypeLink from './TypeLink'\n\nfunction classStructure(classDefinition, key) {\n  let subClasses = null\n  if (classDefinition.subclasses.length > 0) {\n    subClasses = (\n      <ul>\n        {classDefinition.subclasses.map(classStructure)}\n      </ul>\n    )\n  }\n\n  return (\n    <li key={key}>\n      <strong>\n        <TypeLink to={classDefinition.id} />:\n      </strong>{' '}\n      {classDefinition.comment} <br />\n      {subClasses}\n    </li>\n  )\n}\n\nclass ClassHierarchy extends React.Component {\n  render() {\n    return (\n      <>\n        <h2>Class Hierarchy</h2>\n        <ul>{getClassHierarchy().map(classStructure)}</ul>\n      </>\n    )\n  }\n}\n\nexport default ClassHierarchy\n","import React from 'react'\nimport { PrismJSON } from '../../components/Prism'\nimport simpleWebExample from '../../examples/simple-web.json'\nimport Layout from '../../components/layout'\nimport ClassHierarchy from '../../components/ClassHierarchy'\n\nclass SchemaPage extends React.Component {\n  render() {\n    return (\n      <Layout title=\"Schema\">\n        <h2>Introduction</h2>\n        <p>\n          Accessibility Reporting Language (AXRL) is a data\n          format designed to describe accessibility tests\n          for Web pages, Native apps and other software.\n          AXRL is designed to be a flexible and extendable\n          data format. AXRL is designed as a JSON format,\n          although because it is based on semantic web\n          technologies, it could also be expressed in other\n          formats.\n        </p>\n\n        <h3>Example: A basic web page test</h3>\n        <p>\n          This example shows the test for example.com, where\n          the test produced 2 results. One of the results is\n          \"failed\", and the second is \"passed\".\n        </p>\n        <PrismJSON code={simpleWebExample} />\n\n        <h2>\n          <code>@context</code> property\n        </h2>\n        <p>\n          Context is a required property that lives at the\n          root object. The context provides a definition for\n          all of the terms used in the data format. There\n          are a number of contexts predefined for AXRL:\n        </p>\n\n        <p>TODO: Define / describe default contexts</p>\n\n        <p>\n          If the default contexts are insufficient, a custom\n          context can also be provided. The{' '}\n          <a href=\"https://json-ld.org/spec/latest/json-ld/\">\n            JSON-LD standard\n          </a>{' '}\n          defines how these can be created.\n        </p>\n\n        <h2>\n          <code>@type</code> property\n        </h2>\n        <p>\n          An object's <code>@type</code>property defines\n          what that object is. By adding a type to all\n          objects, that object is explicitly defined,\n          instead of having to infer the type from its\n          properties, or from the property it is on. Types\n          can easilly be extended to add properties as they\n          are needed. For example, <code>WebPageTest</code>\n          and <code>AndroidViewTest</code> are both\n          extensions on the\n          <code>UserInterfaceTest</code> type. This gives\n          them a number of shared properties, as some unique\n          properties.\n        </p>\n\n        <p>TODO: Add a graphic</p>\n\n        <h2>AXRL Requirements</h2>\n        <p>\n          In AXRL, all properties with the exception of the{' '}\n          <code>@type</code> property are optional. This\n          gives tools the flexibility to provide data that\n          they have, but does not prevent adoption of AXRL\n          when that data is not available. Properties{' '}\n          <em>must</em> use a value of the expected class.\n          This can be a value that is a sub class of one of\n          the expected classes. Objects <em>must not</em> be\n          given properties not defined for its class. There\n          are three ways to add new properties to a class.\n        </p>\n        <ul>\n          <li>\n            Report a missing property to AXRL and have it\n            added to the data format\n          </li>\n          <li>Create a subclass with the new properties</li>\n          <li>\n            Add an additional class as a type to the object\n          </li>\n        </ul>\n        <ClassHierarchy />\n      </Layout>\n    )\n  }\n}\n\nexport default SchemaPage\n","/* IMPORTANT: This file is used in NodeJS, so can't use ES6 modules */\nconst classes = require('./schema/classes.json')\nconst properties = require('./schema/properties.json')\nconst context = require('./schema/context.json')\n\nfunction findClassData(id) {\n  return classes['@graph'].find(\n    classData => classData.id === id\n  )\n}\n\nfunction findPropertyData(id) {\n  return properties['@graph'].find(\n    propertyData => propertyData.id === id\n  )\n}\n\nfunction getClassInheritance(id) {\n  const classData = findClassData(id)\n  if (!classData) {\n    return []\n  }\n  return getClassInheritance(classData.subClassOf).concat(\n    classData\n  )\n}\n\nfunction getSuperClasses(type) {\n  return classes['@graph'].filter(\n    ({ subClassOf }) => subClassOf === type\n  )\n}\n\nfunction getPropertyDescriptions() {\n  return [...properties['@graph']]\n}\n\nfunction getClassDescriptions() {\n  return [...classes['@graph']]\n}\n\nfunction getTypeDescriptions() {\n  return [\n    ...getPropertyDescriptions(),\n    ...getClassDescriptions()\n  ]\n}\n\nfunction getClassHierarchy(parentClass) {\n  const subclasses = getClassDescriptions().filter(\n    ({ subClassOf }) => subClassOf === parentClass\n  )\n\n  return subclasses.map(classDefinition => {\n    return {\n      subclasses: getClassHierarchy(classDefinition.id),\n      ...classDefinition\n    }\n  })\n}\n\nfunction findTypeData(type) {\n  return findClassData(type) || findPropertyData(type)\n}\n\nfunction getContext() {\n  return { ...context }\n}\n\nfunction getUrl(to) {\n  const [namespace, type] = to.split(':')\n  if (!type) {\n    return `/${to}`\n  }\n  const baseURL = getContext()[namespace]\n  if (!baseURL) {\n    throw new Error(\n      `Unknown namespace '${namespace}' in context.json`\n    )\n  }\n  return baseURL + type\n}\n\nmodule.exports = {\n  findClassData,\n  findPropertyData,\n  findTypeData,\n  getClassInheritance,\n  getSuperClasses,\n  getClassDescriptions,\n  getPropertyDescriptions,\n  getTypeDescriptions,\n  getClassHierarchy,\n  getContext,\n  getUrl\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { findTypeData, getUrl } from '../schema'\n\nclass TypeLink extends React.Component {\n  render() {\n    const { to } = this.props\n    const typeData = findTypeData(to)\n    if (!typeData) {\n      // Don't show a link if the type does not exist\n      return <a>{to}</a>\n    }\n    const url = getUrl(to)\n    const linkText = typeData.label || typeData.id\n    if (url.substr(0, 4) === 'http') {\n      return (\n        <a href={url} target=\"_blank\">\n          {linkText}\n        </a>\n      )\n    } else {\n      return <Link to={url}>{linkText}</Link>\n    }\n  }\n}\n\nexport default TypeLink\n"],"sourceRoot":""}